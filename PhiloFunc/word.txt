The threads go through the cycle of (Think-Eat):

   When a philosopher stops thinking, he/she becomes hungry, and
   wants to eat.  He/she calls i_am_hungry().  This is a procedure that
   you will implement to allocate the philosopher's chopsticks, using
   whatever protocol you desire.  I_am_hungry() should not return until
   the philosopher has the chopsticks.

   When a philosopher stops eating, he/she will go back to thinking.  Before doing so,
   he/she calls i_am_done_eating().  This is another procedure that you will write.  This
   will de-allocate the chopsticks, and do whatever else is required by your protocol.

   When a philosopher picks up a chopstick inside i_am_hungry(), he/she needs to call
   pick_up_chopstick().  That is implemented in dphil_driver.c.  It will make the proper
   print statements, and it will also insure that the philosopher is in the "hungry" state,
   and will block until the chopstick is not really available.

   When a philosopher puts a chopstick down inside i_am_done_eating(), he/she needs to
   call put_down_chopstick().  This is also implemented in dphil_driver.c.  It will make
   the proper print statements, do some double-checking, and will unblock any threads that
   are blocking on pick_up_chopstick().
